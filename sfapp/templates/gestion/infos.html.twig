{% extends 'template/infos.html.twig' %}

{% block liste %}
    <li class="list-group-item">
        <strong>Nom :</strong> {{ item.nom }}
    </li>
    <li class="list-group-item">
        <strong>Prenom :</strong> {{ item.prenom }}
    </li>
    <li class="list-group-item">
        <strong>Adresse :</strong> {{ item.email }}
    </li>
    <li class="list-group-item">
        <strong>Adresse :</strong> {{ item.adresse }}
    </li>
    <li class="list-group-item">
        <strong>Role :</strong>{% for role in item.roles %} {{ role }}{% endfor %}
    </li>
{% endblock %}
{% block ajouts %}
    <h1 class="mb-4">Interventions de {{ item.username }}</h1>

    {% if interventions is not empty %}
        <table class="table table-striped table-bordered table-hover">
            <thead class="thead-dark">
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Salle</th>
                <th scope="col">État</th>
                <th scope="col">Date de l'Intervention</th>
            </tr>
            </thead>
            <tbody>
            {% for intervention in interventions %}
                <tr>
                    <td>{{ intervention.id }}</td>
                    <td>{{ intervention.salle.nom }}</td>
                    <td>
                                <span class="badge bg-{{ intervention.etat == 'EN_COURS' ? 'warning' : (intervention.etat == 'TERMINEE' ? 'success' : 'danger') }}">
                                    {{ intervention.etat }}
                                </span>
                    </td>
                    <td>{{ intervention.dateIntervention|date('d/m/Y H:i') }}</td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    {% else %}
        <div class="alert alert-info" role="alert">
            Aucune intervention trouvée pour ce technicien.
        </div>
    {% endif %}
{% endblock %}
{#
document.addEventListener('DOMContentLoaded', function() {
            console.log("DOM prêt");
            const ctx = document.getElementById('salleGraph').getContext('2d');

            // Récupérer les données depuis Twig
            const labels = {{ labels|json_encode|raw }};
            const temp = {{ tempData|json_encode|raw }};
            const co2 = {{ co2Data|json_encode|raw }};
            const humi = {{ humiData|json_encode|raw }};

            // Créer le graphique
            const salleGraph = new Chart(ctx, {
                type: 'line', // Type du graphique
                data: {
                    labels: labels, // Labels pour l'axe X
                    datasets: [
                        {
                            label: 'Température',
                            data: {{ tempData|json_encode|raw }}, // Données
                            borderColor: 'rgba(255, 217, 0, 1)',
                            backgroundColor: 'rgba(255, 251, 120, 0.2)',
                            borderWidth: 2,
                            tension: 0.4
                        },
                        {
                            label: 'CO2',
                            data: {{ co2Data|json_encode|raw }}, // Données
                            borderColor: 'rgba(255, 113, 113, 1)',
                            backgroundColor: 'rgba(255, 186, 186, 0.2)',
                            borderWidth: 2,
                            tension: 0.4
                        },
                        {
                            label: 'Humidité',
                            data: {{ humiData|json_encode|raw }}, // Données
                            borderColor: 'rgba(106, 223, 255, 1)',
                            backgroundColor: 'rgba(185, 240, 255, 0.2)',
                            borderWidth: 2,
                            tension: 0.4
                        },
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false, // L'axe Y commence à zéro
                            min: Math.min(temp),            // Valeur minimale de l'axe Y
                            max: Math.max(...temp),          // Valeur maximale de l'axe Y
                            stepSize: 10,      // Intervalle des ticks
                            ticks: {
                                color: '#000000', // Couleur des ticks
                            }
                        }
                    }
                }
            })
        }});
#}