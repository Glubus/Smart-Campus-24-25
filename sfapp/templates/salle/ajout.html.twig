{% extends 'base.html.twig' %}

{% block title %}Ajouter une salle{% endblock %}

{% block body %}
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%; /* Assure que le body et le html couvrent 100% de la fenêtre */
            width: 100%;
        }

        body {
            position: relative;
            overflow: hidden; /* Empêche les débordements liés au flou */
        }

        body::before {
            content: ""; /* Obligatoire pour afficher le pseudo-élément */
            position: fixed; /* Fixed pour couvrir toute la fenêtre, même au défilement */
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url("{{ asset('/img/imageFondIut.jpg') }}");
            background-repeat: no-repeat;
            background-size: cover; /* L'image couvre toute la surface */
            background-position: center; /* Centre l'image */
            filter: blur(8px); /* Applique le flou */
            z-index: -1; /* Place l'image derrière le contenu */
        }
    </style>
    <div class="container my-5 card-body" style="width: 40%">
        <div class="card shadow">
            <div class="card-body">
                <h1 class="text-center mb-4">Ajouter une salle</h1>
                {{ form_start(form) }}
                {{ form_widget(form) }}
                {% for message in app.flashes('error') %}
                    <div class="alert alert-danger" style="margin-top: 10px">
                        {{ message }}
                    </div>
                {% endfor %}
                <div class="d-flex justify-content-between mt-4">
                    <button type="submit" class="btn btn-primary" style="margin-right: 10px; margin-top: 10px" role="button">Créer la salle</button>
                    <a href="{{ path('app_salle_liste')}}" class="btn btn-secondary" style="margin-right: 10px; margin-top: 10px" role="button">Annuler</a>
                </div>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
{% endblock %}
{%  block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Récupérer le champ bâtiment
        const batimentField = document.querySelector('[data-action="update-max-etages"]');
        const etageField = document.querySelector('[data-max-etage]');

        if (batimentField && etageField) {
            console.log("Champs détectés :", {
                batimentField,
                etageField
            });

            batimentField.addEventListener('change', function () {
                const batimentId = this.value;
                console.log("ID du bâtiment sélectionné :", batimentId);

                // Exemple d'appel AJAX pour récupérer le nombre d'étages maximum
                fetch(`/batiment/${batimentId}/max-etages`)
                    .then(response => {
                        console.log("Réponse brute du serveur :", response);
                        if (!response.ok) {
                            throw new Error(`Erreur serveur : ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("Données reçues du serveur :", data);

                        if (data.maxEtages) {
                            console.log(`Mise à jour des champs avec maxEtages = ${data.maxEtages}`);

                            // Met à jour le placeholder
                            etageField.placeholder = `Max: ${data.maxEtages}`;
                            console.log("Placeholder mis à jour :", etageField.placeholder);

                            // Met à jour l'attribut "max"
                            etageField.setAttribute('max', data.maxEtages);
                            console.log("Attribut 'max' mis à jour :", etageField.getAttribute('max'));

                            // Met à jour "data-max-etage"
                            etageField.setAttribute('data-max-etage', data.maxEtages);
                            console.log("Attribut 'data-max-etage' mis à jour :", etageField.getAttribute('data-max-etage'));
                        } else {
                            console.warn("Données invalides : 'maxEtages' manquant.");
                        }
                    })
                    .catch(error => console.error('Erreur lors de la récupération des données ou de leur traitement :', error));
            });
        } else {
            console.error("Les champs nécessaires n'ont pas été trouvés sur la page.");
        }
    });

</script>

{% endblock %}